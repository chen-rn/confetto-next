generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                 String              @id @default(uuid())
    email              String?             @unique
    mockInterviews     MockInterview[]
    schools            School[]
    stripeCustomerId   String?            @unique
    subscriptionStatus SubscriptionStatus @default(NOT_SUBSCRIBED)
    stripePriceId      String?
    trialStartedAt     DateTime?
    currentPeriodEnd   DateTime?

    onboardingStatus OnboardingStatus @default(NOT_STARTED)
    mmiDate          DateTime?
    primaryConcern   String?
}

model School {
    id      String @id @default(uuid())
    name    String
    state   String
    country String
    users   User[]
}

model Question {
    id              String            @id @default(uuid())
    content         String
    tags            QuestionTag[]
    answerKey       AnswerKey?
    scoringCriteria ScoringCriteria[]

    mockInterviews MockInterview[]
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
}

model QuestionTag {
    id        String     @id @default(uuid())
    name      String     @unique
    type      String
    questions Question[]

    @@index([name])
}

model MockInterview {
    id                     String    @id @default(uuid())
    user                   User      @relation(fields: [userId], references: [id])
    userId                 String
    question               Question  @relation(fields: [questionId], references: [id])
    questionId             String
    recordingUrl           String?
    videoUrl               String?
    recordingTranscription String?
    feedback               Feedback?
    createdAt              DateTime  @default(now())
    updatedAt              DateTime  @updatedAt
}

model Feedback {
    id              String           @id @default(uuid())
    mockInterview   MockInterview    @relation(fields: [mockInterviewId], references: [id])
    mockInterviewId String           @unique
    status          FeedbackStatus   @default(PENDING)
    overallScore    Int              @default(0)
    overallFeedback String           @default("")
    componentScores ComponentScore[]
    analysisPoints  AnalysisPoint[]
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
}

model ComponentScore {
    id         String   @id @default(uuid())
    feedback   Feedback @relation(fields: [feedbackId], references: [id])
    feedbackId String
    name       String
    score      Int
    maxPoints  Int
    summary    String
}

model AnalysisPoint {
    id         String       @id @default(cuid())
    type       AnalysisType
    quote      String?
    analysis   String
    feedback   Feedback     @relation(fields: [feedbackId], references: [id])
    feedbackId String
}

model AnswerKey {
    id                String             @id @default(uuid())
    question          Question           @relation(fields: [questionId], references: [id])
    questionId        String             @unique
    keyInsights       KeyInsight[]
    answerStructure   AnswerStructure[]
    modelAnswer       String             @db.Text
    highlightedPoints HighlightedPoint[]
}

model KeyInsight {
    id          String    @id @default(uuid())
    answerKey   AnswerKey @relation(fields: [answerKeyId], references: [id])
    answerKeyId String
    title       String
    description String
}

model AnswerStructure {
    id          String    @id @default(uuid())
    answerKey   AnswerKey @relation(fields: [answerKeyId], references: [id])
    answerKeyId String
    section     String
    purpose     String
}

model HighlightedPoint {
    id          String    @id @default(uuid())
    answerKey   AnswerKey @relation(fields: [answerKeyId], references: [id])
    answerKeyId String
    text        String
    insight     String
    explanation String
}

model FeedbackPrompt {
    id        String   @id @default(cuid())
    name      String   @unique
    prompt    String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ScoringCriteria {
    id          String    @id @default(uuid())
    name        String
    description String
    maxPoints   Int
    Question    Question? @relation(fields: [questionId], references: [id])
    questionId  String?
}

enum SubscriptionStatus {
    NOT_SUBSCRIBED
    TRIAL
    ACTIVE
    PAST_DUE
    CANCELED
    EXPIRED
}

enum OnboardingStatus {
    NOT_STARTED
    IN_PROGRESS
    COMPLETED
}

enum AnalysisType {
    STRENGTH
    IMPROVEMENT
    MISSING
}

enum FeedbackStatus {
    PENDING
    PROCESSING
    COMPLETED
    FAILED
}
