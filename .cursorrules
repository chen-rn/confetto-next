You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind.
Libraries that we'll be using include:

- Clerk for Authentication(when importing server related things, use @clerk/nextjs/server)
- Prisma for Database(/api/prisma is our client)
- Firebase for Cloud Storage
- Server Actions instead of creating /API routes when possible.
- text-[#635BFF], the color is our primary color

Code Style and Structure

- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.
- When importing types, specify the module name (e.g., import type { School } from "@prisma/client").

Naming Conventions

- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

TypeScript Usage

- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

Syntax and Formatting

- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.

UI and Styling

- Use Shadcn UI, Radix, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

Performance Optimization

- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.

Key Conventions

- Use 'nuqs' for URL search parameter state management.
- Optimize Web Vitals (LCP, CLS, FID).
- Limit 'use client':
  - Favor server components and Next.js SSR.
  - Use only for Web API access in small components.
  - Avoid for data fetching or state management.

Follow Next.js docs for Data Fetching, Rendering, and Routing.

When using react query with server actions, we must wrap the queryFn in a function like this.
const { data: userSchools = [] } = useQuery({
queryKey: ["userSchools"],
queryFn: () => {
return getUserSchools();
},
});

Here's my schema, for your reference, no need to change unless necessary:
generator client {
provider = "prisma-client-js"
}

datasource db {
provider = "postgresql" // or your preferred database
url = env("DATABASE_URL")
}

model User {
id String @id @default(uuid())
mockInterviews MockInterview[]
schools School[] // Many-to-many relation with School

    // Subscription related fields
    stripeCustomerId   String?            @unique
    subscriptionStatus SubscriptionStatus @default(NOT_SUBSCRIBED)
    stripePriceId      String? // Store the active price ID instead of enum
    trialStartedAt     DateTime?
    currentPeriodEnd   DateTime?

    onboardingStatus OnboardingStatus @default(NOT_STARTED)
    mmiDate          DateTime?
    primaryConcern   String?

}

model School {
id String @id @default(uuid())
name String
state String // or province
country String
users User[] // Many-to-many relation with User
}

model Question {
id String @id @default(uuid())
content String
evaluationCriteria String?
tags QuestionTag[] // Now handles both topics and other tags

    mockInterviews MockInterview[]
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt

}

model QuestionTag {
id String @id @default(uuid())
name String @unique
type TagType // Updated enum below to include TOPIC type
questions Question[]

    @@index([name])

}

enum TagType {
TOPIC // New type for former TopicName items
STATE
COUNTRY
}

model MockInterview {
id String @id @default(uuid())
user User @relation(fields: [userId], references: [id])
userId String
question Question @relation(fields: [questionId], references: [id])
questionId String
recordingUrl String? // This will store the audio URL
videoUrl String? // This will store the video URL
recordingTranscription String?
feedback Feedback?
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}

model Feedback {
id String @id @default(uuid())
mockInterview MockInterview @relation(fields: [mockInterviewId], references: [id])
mockInterviewId String @unique
overallScore Int @default(0)
overallFeedback String @default("")
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}

model FeedbackPrompt {
id String @id @default(cuid())
name String @unique
prompt String @db.Text
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}

enum SubscriptionStatus {
NOT_SUBSCRIBED
TRIAL
ACTIVE
PAST_DUE
CANCELED
EXPIRED
}

enum OnboardingStatus {
NOT_STARTED
IN_PROGRESS
COMPLETED
}
